# API_KEY = API_KEY = "AIzaSyABJ1jK42mi9ovXsnzJBt2bobl-WvAX5q8"
# MODEL_NAME = "gemini-1.5-flash-latest"
# GEMINI_API_URL = f"https://generativelanguage.googleapis.com/v1beta/models/{MODEL_NAME}:generateContent?key={API_KEY}"
# ======================================================================================
# REPORT_GENERATOR.PY
#
# –†–û–õ–¨: "RAG-–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å –∏ –°–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä"
#
# –û–ü–ò–°–ê–ù–ò–ï:
# –§–∏–Ω–∞–ª—å–Ω—ã–π –∏ —Å–∞–º—ã–π –≤–∞–∂–Ω—ã–π –º–æ–¥—É–ª—å –∫–æ–Ω–≤–µ–π–µ—Ä–∞. –í—ã–ø–æ–ª–Ω—è–µ—Ç –¥–≤–µ –∑–∞–¥–∞—á–∏:
#   1. –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï (RAG): –ø–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ.
#   2. –°–ò–ù–¢–ï–ó (LLM): —Å–±–æ—Ä –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞.
# ======================================================================================
import requests
from duckduckgo_search import DDGS


class ReportGenerator:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ü–∏–¥–µ–Ω—Ç-–æ—Ç—á–µ—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º RAG –∏ LLM (Gemini API)."""

    def __init__(self, api_key: str, model_name: str) -> None:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤.

        Args:
            api_key (str): API-–∫–ª—é—á –¥–ª—è Gemini.
            model_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ Gemini.
        """
        self.api_key = api_key
        self.model_name = model_name
        self.gemini_api_url = (
            f"https://generativelanguage.googleapis.com/v1beta/models/"
            f"{self.model_name}:generateContent?key={self.api_key}"
        )

    def search_for_solutions(self, query: str) -> str:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (RAG).

        Args:
            query (str): –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–æ–±—ã—á–Ω–æ, —Ç–∏–ø –æ—à–∏–±–∫–∏).

        Returns:
            str: –°—Ç—Ä–æ–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞, –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞.
        """
        print(f"INFO (–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å): –ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{query}'")
        try:
            with DDGS() as ddgs:
                results = [r for r in ddgs.text(query, max_results=3)]
                if not results:
                    return "–ü–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."

                context = "–í–æ—Ç –∫—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –ø–æ —ç—Ç–æ–π –ø—Ä–æ–±–ª–µ–º–µ:\n"
                for res in results:
                    context += (
                        f"- –ò—Å—Ç–æ—á–Ω–∏–∫: {res.get('href')}\n"
                        f"  –¶–∏—Ç–∞—Ç–∞: {res.get('body', '')[:250]}...\n"
                    )
                return context
        except Exception as e:
            print(f"ERROR (–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å): –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: {e}")
            return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."

    def generate_incident_report(
        self, anomaly_details: dict, log_cluster_info: dict | None = None
    ) -> str:
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ Gemini API, –æ–±–æ–≥–∞—â–∞—è –µ–≥–æ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ø–æ–∏—Å–∫–∞ (RAG).

        Args:
            anomaly_details (dict): –°–ª–æ–≤–∞—Ä—å —Å –¥–µ—Ç–∞–ª—è–º–∏ –æ—Ç predict_failures.
            log_cluster_info (dict | None): –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≥–æ–≤.

        Returns:
            str: –ì–æ—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown.
        """
        if not self.api_key or self.api_key == "–í–°–¢–ê–í–¨_–°–Æ–î–ê_–°–í–û–ô_GEMINI_API_–ö–õ–Æ–ß":
            return "–û–®–ò–ë–ö–ê: API-–∫–ª—é—á –¥–ª—è Gemini –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."

        rag_context = ""
        if log_cluster_info:
            error_query = log_cluster_info.get("example1", "N/A").split(":")[0]
            rag_context = self.search_for_solutions(error_query)

        log_summary = "–ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ –Ω–µ –ø—Ä–æ–≤–æ–¥–∏–ª—Å—è (—ç—Ç–æ –ø—Ä–æ–≥–Ω–æ–∑)"
        if log_cluster_info:
            log_summary = (
                f"{log_cluster_info.get('percentage', 'N/A')}% –æ—à–∏–±–æ–∫ –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ –æ–¥–Ω–æ–º—É —Ç–∏–ø—É: "
                f"'{log_cluster_info.get('top_error_type', 'N/A')}'. "
                f"–ü—Ä–∏–º–µ—Ä—ã: '{log_cluster_info.get('example1', 'N/A')}'"
            )

        prompt_text = f"""
        –¢—ã ‚Äî SRE-—ç–∫—Å–ø–µ—Ä—Ç –º–∏—Ä–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ –∏ –≤–Ω–µ—à–Ω—é—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —á—Ç–æ–±—ã —Å–æ—Å—Ç–∞–≤–∏—Ç—å –∏—Å—á–µ—Ä–ø—ã–≤–∞—é—â–∏–π –æ—Ç—á–µ—Ç.

        **–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:**
        1.  **–°–∏–≥–Ω–∞–ª –æ—Ç —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:** {anomaly_details}
        2.  **–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≥–æ–≤:** {log_summary}

        **–ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ (RAG):**
        {rag_context}

        **–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –≤ Markdown:**
        ### üö® –û—Ç—á–µ—Ç –æ–± –∏–Ω—Ü–∏–¥–µ–Ω—Ç–µ
        **1. –ß—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ (–∏–ª–∏ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç)?** (–û–ø–∏—à–∏ –ø—Ä–æ–±–ª–µ–º—É –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º)
        **2. –í–µ—Ä–æ—è—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞ (Root Cause)** (–°–¥–µ–ª–∞–π –≤—ã–≤–æ–¥, –æ–±—ä–µ–¥–∏–Ω–∏–≤ –¥–∞–Ω–Ω—ã–µ –ª–æ–≥–æ–≤ –∏ –ø–æ–∏—Å–∫–∞)
        **3. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —à–∞–≥–∏ –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è (Action Plan)** (–ü—Ä–µ–¥–ª–æ–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —à–∞–≥–∏, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –í–°–ï–ô –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ë—É–¥—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–µ–Ω)
        """

        headers = {"Content-Type": "application/json"}
        json_data = {"contents": [{"parts": [{"text": prompt_text}]}]}

        print("INFO (–°–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä): –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ Gemini API...")
        try:
            response = requests.post(
                self.gemini_api_url, headers=headers, json=json_data, timeout=60
            )
            response.raise_for_status()
            return response.json()["candidates"][0]["content"]["parts"][0]["text"]
        except Exception as e:
            return f"–û–®–ò–ë–ö–ê (–°–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä): –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç. {e}"
