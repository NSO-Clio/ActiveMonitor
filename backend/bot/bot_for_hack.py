import asyncio
import logging
import os
import nest_asyncio
import pandas as pd
import matplotlib.pyplot as plt
import httpx
from aiogram import Bot, Dispatcher, types, F, html
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv
from supabase import create_client, Client
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timedelta
import json

from .test_req import get_checks_dataframe, get_all_sites
# –ü—Ä–∏–º–µ–Ω—è–µ–º nest_asyncio –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã Supabase –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Å—Ä–µ–¥–µ
nest_asyncio.apply()
load_dotenv()

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase/LLM ---
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")
SITES_TABLE = os.getenv("SITES_TABLE", "sites")
CHECKS_TABLE = os.getenv("CHECKS_TABLE", "site_checks")
TOKEN = os.getenv("TOKEN_REAL")
GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")
ORCHESTRATOR_URL = os.getenv("ORCHESTRATOR_URL")


if not all([SUPABASE_URL, SUPABASE_KEY, TOKEN, GOOGLE_API_KEY]):
    raise ValueError("One or more required environment variables (SUPABASE_URL, SUPABASE_KEY, TOKEN, GOOGLE_API_KEY) not found in .env file")

supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ ---
logging.basicConfig(level=logging.INFO)
bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())
scheduler = AsyncIOScheduler()

user_data = {}
monitored_sites = {}

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Supabase ---
def get_all_sites():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–∞–π—Ç–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã SITES_TABLE."""
    try:
        resp = supabase.table(SITES_TABLE).select("*").execute()
        return resp.data or []
    except Exception as e:
        logging.error(f"Error fetching all sites: {e}")
        return []

def get_site_by_url(url: str):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Å–∞–π—Ç–µ –ø–æ –µ–≥–æ URL."""
    try:
        resp = supabase.table(SITES_TABLE).select("*").eq("url", url).execute()
        return resp.data[0] if resp.data else None
    except Exception as e:
        logging.error(f"Error fetching site by URL: {e}")
        return None

def get_site_by_id(site_id: str):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Å–∞–π—Ç–µ –ø–æ –µ–≥–æ ID."""
    try:
        resp = supabase.table(SITES_TABLE).select("*").eq("id", site_id).execute()
        return resp.data[0] if resp.data else None
    except Exception as e:
        logging.error(f"Error fetching site by ID: {e}")
        return None

# –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–∏–ª url –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
async def add_check_to_db(site_id: str, status_code: int, response_time: float, url: str, error_message: str = None):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    try:
        data = {
            "site_id": site_id,
            "url": url,  # –ò–°–ü–†–ê–í–õ–ï–ù–û: —Ç–µ–ø–µ—Ä—å URL —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è
            "status_code": status_code,
            "response_time": response_time,
            "check_time": datetime.now().isoformat(),
            "console_logs": {"error": error_message} if error_message else None
        }
        # –ù–û–í–û–ï: –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        resp = supabase.table(CHECKS_TABLE).insert(data).execute()
        return resp.data[0]['id'] if resp.data else None
    except Exception as e:
        logging.error(f"Error adding check to DB: {e}")
        return None

# --- –§–£–ù–ö–¶–ò–Ø –ü–†–û–ì–ù–û–ó–ê ---
async def analyze_and_predict(site_id: str):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ —É –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ AI Incident Orchestrator API.
    """
    try:
        # –î–æ—Å—Ç–∞—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞ 24 —á–∞—Å–∞)
        since = datetime.utcnow() - timedelta(days=1)
        resp = (
            supabase.table(CHECKS_TABLE)
            .select("response_time, status_code, check_time, console_logs")
            .eq("site_id", site_id)
            .gte("check_time", since.isoformat())
            .order("check_time", desc=False)
            .execute()
        )
        data = resp.data or []

        # –õ–æ–≥–∏ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
        old_logs = [
            {
                "timestamp": row["check_time"],
                "response_time_ms": int(row["response_time"] * 1000),
            }
            for row in data
            if row.get("response_time") is not None
        ]

        # –õ–æ–≥–∏ —Å –æ—à–∏–±–∫–∞–º–∏
        logs_anomaly = []
        for row in data:
            if row.get("console_logs") and isinstance(row["console_logs"], dict):
                error_msg = row["console_logs"].get("error")
                if error_msg:
                    logs_anomaly.append(
                        {
                            "timestamp": row["check_time"],
                            "log_level": "ERROR",
                            "message": error_msg,
                        }
                    )

        payload = {
            "old_logs": old_logs,
            "logs_anomaly": logs_anomaly,
            "choice_role": False,  # —É–∫–∞–∂–∏ True, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏ —Ä–æ–ª—å –∏–Ω–∂–µ–Ω–µ—Ä–∞
        }

        async with httpx.AsyncClient(timeout=30.0) as client:
            response = await client.post(f"{ORCHESTRATOR_URL}/run-orchestrator", json=payload)
            response.raise_for_status()
            result = response.json()

        return f"üõ† –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç Orchestrator:\n\n{json.dumps(result, indent=2, ensure_ascii=False)}"

    except Exception as e:
        logging.error(f"Error calling orchestrator API: {e}")
        return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API."


# --- –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –†–ê–°–®–ò–§–†–û–í–ö–ò –û–®–ò–ë–ö–ò ---
async def decipher_error_and_suggest_specialist(error_message: str):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—à–∏–±–∫—É –≤ Orchestrator API –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞.
    """
    try:
        payload = {
            "old_logs": [],  # —Ç—É—Ç –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            "logs_anomaly": [
                {
                    "timestamp": datetime.utcnow().isoformat(),
                    "log_level": "ERROR",
                    "message": error_message,
                }
            ],
            "choice_role": True  # –≤–∫–ª—é—á–∞–µ–º, —á—Ç–æ–±—ã API –≤–µ—Ä–Ω—É–ª –∏–Ω–∂–µ–Ω–µ—Ä–∞
        }

        async with httpx.AsyncClient(timeout=30.0) as client:
            response = await client.post(f"{ORCHESTRATOR_URL}/run-orchestrator", json=payload)
            response.raise_for_status()
            result = response.json()

        return f"üìå –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –æ—à–∏–±–∫–∏:\n\n{json.dumps(result, indent=2, ensure_ascii=False)}"

    except Exception as e:
        logging.error(f"Error deciphering error with Orchestrator API: {e}")
        return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API."


# --- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∞–π—Ç–∞ ---
async def monitor_site(site_id: str, chat_id: int):
    if site_id not in monitored_sites:
        return

    site_data = get_site_by_id(site_id)
    if not site_data:
        logging.warning(f"Site with ID {site_id} not found in DB. Stopping monitor.")
        return

    try:
        async with httpx.AsyncClient(timeout=10.0) as client:
            resp = await client.get(site_data['url'])
            status_code = resp.status_code
            response_time = resp.elapsed.total_seconds()
            error_message = None

            if 200 <= status_code < 400:
                logging.info(f"–°–∞–π—Ç {site_data['url']} —Ä–∞–±–æ—Ç–∞–µ—Ç. –°—Ç–∞—Ç—É—Å: {status_code}")
                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–¥–∞—ë–º URL
                check_id = await add_check_to_db(site_id, status_code, response_time, site_data['url'])
            else:
                error_message = f"–°–∞–π—Ç –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {status_code}"
                logging.error(error_message)

                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–¥–∞—ë–º URL
                check_id = await add_check_to_db(site_id, status_code, response_time, site_data['url'], error_message)

                if site_id in monitored_sites and check_id:
                    # –ù–û–í–û–ï: –ü–µ—Ä–µ–¥–∞–µ–º ID –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø—Ä—è–º—É—é –≤ callback_data
                    inline_kb = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É", callback_data=f"decipher_{check_id}")]
                    ])
                    await bot.send_message(
                        chat_id,
                        f"‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï!** –°–∞–π—Ç <b>{site_data.get('name', '–±–µ–∑ –∏–º–µ–Ω–∏')}</b> —Å–ª–æ–º–∞–ª—Å—è!\n"
                        f"URL: <b>{site_data['url']}</b>\n"
                        f"–û—à–∏–±–∫–∞: {error_message}",
                        reply_markup=inline_kb
                    )

    except httpx.RequestError as e:
        error_message = f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}"
        logging.error(error_message)

        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–¥–∞—ë–º URL
        check_id = await add_check_to_db(site_id, 0, 0, site_data['url'], error_message)

        if site_id in monitored_sites and check_id:
            # –ù–û–í–û–ï: –ü–µ—Ä–µ–¥–∞–µ–º ID –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø—Ä—è–º—É—é –≤ callback_data
            inline_kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É", callback_data=f"decipher_{check_id}")]
            ])
            await bot.send_message(
                chat_id,
                f"‚ùå **–í–ù–ò–ú–ê–ù–ò–ï!** –°–∞–π—Ç <b>{site_data.get('name', '–±–µ–∑ –∏–º–µ–Ω–∏')}</b> –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!\n"
                f"URL: <b>{site_data['url']}</b>\n"
                f"–û—à–∏–±–∫–∞: {error_message}",
                reply_markup=inline_kb
            )

# --- –¢–µ–∫—Å—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
WELCOME_MESSAGE = (
    "üëã **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤–µ–±-—Å–µ—Ä–≤–∏—Å–æ–≤!**\n\n"
    "–Ø ‚Äî –≤–∞—à –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ 24/7."
)

def get_main_keyboard():
    buttons = [
        [InlineKeyboardButton(text="–û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –Ω–æ–≤—ã–π —Å–∞–π—Ç", callback_data="track_site")],
        [InlineKeyboardButton(text="–ú–æ–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Å–∞–π—Ç—ã", callback_data="list_sites")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_site_actions_keyboard(site_id: str):
    buttons = [
        [InlineKeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", callback_data=f"show_info_{site_id}")],
        [InlineKeyboardButton(text="–ü—Ä–æ–≥–Ω–æ–∑", callback_data=f"predict_{site_id}")],
        [InlineKeyboardButton(text="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", callback_data=f"stop_{site_id}")],
        [InlineKeyboardButton(text="<< –ù–∞–∑–∞–¥", callback_data="start_over")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ aiogram ---
@dp.message(CommandStart())
async def command_start_handler(message: types.Message) -> None:
    await message.answer(
        WELCOME_MESSAGE,
        reply_markup=get_main_keyboard()
    )

@dp.callback_query(F.data == "start_over")
async def back_to_start_handler(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(
        WELCOME_MESSAGE,
        reply_markup=get_main_keyboard()
    )
    await bot.answer_callback_query(callback_query.id)

@dp.callback_query(F.data == "track_site")
async def track_site_callback_handler(callback_query: types.CallbackQuery):
    await callback_query.message.answer(
        "üîó –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å."
    )
    await bot.answer_callback_query(callback_query.id)

@dp.message(F.text.startswith("http"))
async def check_url_handler(message: types.Message) -> None:
    url = message.text.strip()
    site_data = get_site_by_url(url)

    if site_data:
        site_id = site_data['id']
        chat_id = message.chat.id
        user_id = message.from_user.id
        user_data[user_id] = site_data # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞

        if site_id not in monitored_sites:
            job_id = f"monitor_{site_id}_{chat_id}"
            scheduler.add_job(
                monitor_site,
                'interval',
                minutes=1,
                id=job_id,
                args=(site_id, chat_id),
                replace_existing=True
            )
            monitored_sites[site_id] = job_id
            await message.answer(
                f"‚úÖ –ù–∞—á–∏–Ω–∞—é —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Å–∞–π—Ç–æ–º <b>{site_data.get('name', '–±–µ–∑ –∏–º–µ–Ω–∏')}</b>! "
                "–Ø –±—É–¥—É –ø—Ä–æ–≤–µ—Ä—è—Ç—å –µ–≥–æ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –∏ —Å–æ–æ–±—â—É, –µ—Å–ª–∏ –æ–Ω —Å–ª–æ–º–∞–µ—Ç—Å—è.",
                reply_markup=get_site_actions_keyboard(site_id)
            )
        else:
            await message.answer(
                f"üîç –Ø —É–∂–µ —Å–ª–µ–∂—É –∑–∞ —Å–∞–π—Ç–æ–º <b>{site_data.get('name', '–±–µ–∑ –∏–º–µ–Ω–∏')}</b>.",
                reply_markup=get_site_actions_keyboard(site_id)
            )
    else:
        await message.answer(
            "‚ùå –°–∞–π—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ. –ü—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥, –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ.",
        )

@dp.callback_query(F.data.startswith("show_info_"))
async def show_site_info_handler(callback_query: types.CallbackQuery):
    site_id = callback_query.data.split('_')[2]
    site_data = get_site_by_id(site_id)

    if not site_data:
        await callback_query.answer("–°–∞–π—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    try:
        df_resp = supabase.table(CHECKS_TABLE).select("*").eq("site_id", site_id).order("check_time", desc=True).limit(10).execute()
        df = pd.DataFrame(df_resp.data)
    except Exception:
        df = pd.DataFrame()

    if not df.empty:
        df['check_time'] = pd.to_datetime(df['check_time']).dt.tz_convert(None)
        df = df.sort_values(by='check_time')

        temp_file_path = f"plot_{site_id}.png"

        plt.style.use('seaborn-v0_8-darkgrid')
        plt.figure(figsize=(10, 6))

        if not df['response_time'].empty:
            plt.plot(df['check_time'], df['response_time'], marker='o', linestyle='-', color='#4287f5')

        plt.title(f"–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è {site_data.get('name', '—Å–∞–π—Ç–∞')}", fontsize=16)
        plt.xlabel("–í—Ä–µ–º—è", fontsize=12)
        plt.ylabel("–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ (—Å)", fontsize=12)
        plt.xticks(rotation=45, ha="right")
        plt.tight_layout()

        plt.savefig(temp_file_path)
        plt.close()

        photo_file = FSInputFile(temp_file_path)
        try:
            await bot.send_photo(
                chat_id=callback_query.from_user.id,
                photo=photo_file,
                caption=f"üìä **–ì—Ä–∞—Ñ–∏–∫ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞** –¥–ª—è —Å–∞–π—Ç–∞ <b>{site_data.get('name', '–±–µ–∑ –∏–º–µ–Ω–∏')}</b>"
            )
        except Exception as e:
            logging.error(f"Failed to send photo: {e}")
            await callback_query.message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")

        if os.path.exists(temp_file_path):
            os.remove(temp_file_path)

        await callback_query.message.answer(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Å–∞–π—Ç–∞ {site_data.get('name', '–±–µ–∑ –∏–º–µ–Ω–∏')}",
            reply_markup=get_site_actions_keyboard(site_id)
        )

    else:
        await callback_query.message.answer(
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–∞—Ö –¥–ª—è —ç—Ç–æ–≥–æ —Å–∞–π—Ç–∞. "
            "–í–æ–∑–º–æ–∂–Ω–æ, –µ—â—ë –Ω–µ –±—ã–ª–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏."
        )
    await bot.answer_callback_query(callback_query.id)


@dp.callback_query(F.data.startswith("stop_"))
async def stop_monitoring_handler(callback_query: types.CallbackQuery):
    site_id = callback_query.data.split('_')[1]
    site_data = get_site_by_id(site_id)
    job_id = monitored_sites.get(site_id)

    if job_id:
        try:
            scheduler.remove_job(job_id)
            del monitored_sites[site_id]
            # –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º –∏–∑ user_data, –µ—Å–ª–∏ –æ–Ω —Ç–∞–º –µ—Å—Ç—å
            user_id_to_del = None
            for uid, s_data in user_data.items():
                if s_data.get('id') == site_id:
                    user_id_to_del = uid
                    break
            if user_id_to_del:
                del user_data[user_id_to_del]


            await callback_query.message.edit_text(
                f"‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∞–π—Ç–∞ <b>{site_data.get('name', '–±–µ–∑ –∏–º–µ–Ω–∏')}</b> –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.",
                reply_markup=get_main_keyboard()
            )
        except Exception as e:
            logging.error(f"Failed to remove job: {e}")
            await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.", show_alert=True)
    else:
        await callback_query.answer("‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è —ç—Ç–æ–≥–æ —Å–∞–π—Ç–∞ –Ω–µ –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω.", show_alert=True)

    await bot.answer_callback_query(callback_query.id)

@dp.callback_query(F.data.startswith("predict_"))
async def predict_handler(callback_query: types.CallbackQuery):
    site_id = callback_query.data.split('_')[1]
    site_data = get_site_by_id(site_id)

    if not site_data:
        await callback_query.answer("–°–∞–π—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    await bot.answer_callback_query(callback_query.id, text="üîÆ –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –ø—Ä–æ–≥–Ω–æ–∑ —É –Ω–µ–π—Ä–æ—Å–µ—Ç–∏...")

    forecast = await analyze_and_predict(site_id)
    await callback_query.message.answer(
        f"**–ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è —Å–∞–π—Ç–∞ {site_data.get('name', '–±–µ–∑ –∏–º–µ–Ω–∏')}:**\n\n{forecast}",
    )


@dp.callback_query(F.data.startswith("decipher_"))
async def decipher_callback_handler(callback_query: types.CallbackQuery) -> None:
    try:
        check_id = callback_query.data.split('_')[1]
        resp = supabase.table(CHECKS_TABLE).select("console_logs, site_id").eq("id", check_id).single().execute()

        site_id = resp.data.get('site_id') if resp.data else None
        error_logs = resp.data.get('console_logs', {}).get('error') if resp.data else None

        if error_logs:
            await bot.answer_callback_query(callback_query.id, text="–†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞—é –æ—à–∏–±–∫—É...")
            deciphered_text = await decipher_error_and_suggest_specialist(error_logs)
            await bot.send_message(
                callback_query.from_user.id,
                f"**–ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–∫–∏:**\n\n{deciphered_text}",
            )
        else:
            await bot.answer_callback_query(callback_query.id, text="–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ—à–∏–±–∫—É –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏.")

    except Exception as e:
        logging.error(f"Error handling decipher callback: {e}")
        await bot.answer_callback_query(callback_query.id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")

# --- –ù–û–í–ê–Ø –ö–û–ú–ê–ù–î–ê ---
@dp.message(Command("tracked_sites"))
@dp.callback_query(F.data == "list_sites")
async def list_tracked_sites_handler(update: types.Update):
    message_text = "üìà **–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Å–∞–π—Ç—ã:**\n\n"
    buttons = []
    if not monitored_sites:
        message_text += "–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å–∞–π—Ç–æ–≤."
    else:
        for site_id, job_id in monitored_sites.items():
            site_data = get_site_by_id(site_id)
            if site_data:
                buttons.append([InlineKeyboardButton(text=site_data.get('name', site_data.get('url')), callback_data=f"manage_site_{site_id}")])

    if not buttons:
        message_text += "–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Å–∞–π—Ç–æ–≤."


    buttons.append([InlineKeyboardButton(text="<< –ù–∞–∑–∞–¥", callback_data="start_over")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    if isinstance(update, types.Message):
        await update.answer(message_text, reply_markup=keyboard)
    elif isinstance(update, types.CallbackQuery):
        await update.message.edit_text(message_text, reply_markup=keyboard)
        await bot.answer_callback_query(update.id)


@dp.callback_query(F.data.startswith("manage_site_"))
async def manage_site_handler(callback_query: types.CallbackQuery):
    site_id = callback_query.data.split('_')[2]
    site_data = get_site_by_id(site_id)
    if site_data:
        await callback_query.message.edit_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Å–∞–π—Ç–∞ **{site_data.get('name', site_data.get('url'))}**:",
            reply_markup=get_site_actions_keyboard(site_id)
        )
    else:
        await callback_query.answer("–°–∞–π—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
    await bot.answer_callback_query(callback_query.id)


async def main() -> None:
    scheduler.start()
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())